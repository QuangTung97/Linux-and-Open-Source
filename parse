#!/bin/bash
input="$@"

is_special() {
    local ch="$1"
    case "$ch" in
        '+') return 0;;
        '-') return 0;;
        '*') return 0;;
        '/') return 0;;
        '(') return 0;;
        ')') return 0;;
        *) return 1;;
    esac
}

is_dot() {
    local ch="$1"
    if [[ "$ch" == "." ]]; then 
        return 0
    fi
    return 1
}

is_word() {
    local ch="$1"
    if ([[ ! "$ch" < a ]] && [[ ! "$ch" > z ]]) || \
        ([[ ! "$ch" < A ]] && [[ ! "$ch" > Z ]]); then
        return 0
    fi
    return 1
}

is_blank() {
    local ch="$1"
    if [[ "$ch" == ' ' ]] || [[ "$ch" == "$(printf '\t')" ]]; then
        return 0
    fi
    return 1
}

is_digit() {
    local ch="$1"
    if [[ ! "$ch" < '0' ]] && [[ ! "$ch" > '9' ]]; then
        return 0
    fi
    return 1
}

allow_word() {
    local word="$1"
    case "$word" in
        sin) return 0;;
        cos) return 0;;
        tan) return 0;;
        log) return 0;;
        exp) return 0;;
        sqrt) return 0;;
    esac
    return 1
}

################
# State Manager
################
current='start'

make_transition_to() {
    local state="$1"
    local ch="$2"
    ${current}_exit "$state"
    current="$state"
    ${current}_entry "$ch"
}


################
# States
################
result=''

start_entry() {
    local ch="$1"
    start_next "$ch"
}

start_next() {
    local ch="$1"
    if is_blank "$ch"; then
        return 0
    elif is_word "$ch"; then
        make_transition_to 'word' "$ch"
    elif is_special "$ch"; then
        make_transition_to 'special' "$ch"
    elif is_digit "$ch"; then
        make_transition_to 'real_non_dot' "$ch"
    elif is_dot "$ch"; then
        make_transition_to 'dot' "$ch"
    else
        return 0
    fi
}

start_exit() {
    return
}

word_entry() {
    local ch="$1"
    result="$ch"
}

word_next() {
    local ch="$1"
    if is_word "$ch"; then
        result="${result}${ch}"
    else
        make_transition_to 'start' "$ch"
    fi
}

word_exit() {
    if allow_word "$result"; then
        echo "$result"
    fi
}

real_non_dot_entry() {
    local ch="$1"
    result="$ch"
}

real_non_dot_next() {
    local ch="$1"
    if is_digit "$ch"; then
        result="${result}${ch}"
    elif is_dot "$ch"; then
        make_transition_to 'real_with_dot' "$ch"
    else
        make_transition_to 'start' "$ch"
    fi
}

real_non_dot_exit() {
    local next_state="$1"
    if [[ ! "$next_state" == 'real_with_dot' ]]; then
        echo "$result"
    fi
}

real_with_dot_entry() {
    local ch="$1"
    result="${result}${ch}"
}

real_with_dot_next() {
    local ch="$1"
    if is_digit "$ch"; then
        result="${result}${ch}"
    else
        make_transition_to 'start' "$ch"
    fi
}

real_with_dot_exit() {
    echo "$result"
}

dot_entry() {
    local ch="$1"
    result="$ch"
}

dot_next() {
    local ch="$1"
    if is_digit "$ch"; then
        make_transition_to 'real_with_dot' "$ch"
    else
        make_transition_to 'start' "$ch"
    fi
}

dot_exit() {
    return
}

special_entry() {
    local ch="$1"
    result="$ch"
}

special_next() {
    local ch="$1"
    make_transition_to 'start' "$ch"
}

special_exit() {
    echo "$result"
}

input_size="${#input}"
i=0
ch="${input:$i:1}"
${current}_entry "$ch"

for ((i = 1; i < input_size; i++)); do
    ch="${input:$i:1}"
    ${current}_next "$ch"
done
${current}_exit 'start'
