#!/bin/bash
if (($# < 1)); then
    exit
fi

input="$@"
declare -a tokens

push_token() {
    local token="$1"
    local size=${#tokens[@]}
    tokens[$size]="$token"
}

tokens_replace_back() {
    local token="$1"
    local size=${#tokens[@]}
    ((size--))
    tokens[$size]="$token"
}

tokens_back() {
    local size=${#tokens[@]}
    ((size--))
    if ((size < 0)); then
        return_=''
    else
        return_="${tokens[$size]}"
    fi
}

tokens_prev_back() {
    local size=${#tokens[@]}
    ((size -= 2))
    if ((size < 0)); then
        return_=''
    else
        return_="${tokens[$size]}"
    fi
}

is_special() {
    local ch="$1"
    case "$ch" in
        '+') return 0;;
        '-') return 0;;
        '*') return 0;;
        '/') return 0;;
        '(') return 0;;
        ')') return 0;;
        *) return 1;;
    esac
}

is_dot() {
    local ch="$1"
    if [[ "$ch" == "." ]]; then 
        return 0
    fi
    return 1
}

is_word() {
    local ch="$1"
    if ([[ ! "$ch" < a ]] && [[ ! "$ch" > z ]]) || \
        ([[ ! "$ch" < A ]] && [[ ! "$ch" > Z ]]); then
        return 0
    fi
    return 1
}

is_blank() {
    local ch="$1"
    if [[ "$ch" == ' ' ]] || [[ "$ch" == "$(printf '\t')" ]]; then
        return 0
    fi
    return 1
}

is_digit() {
    local ch="$1"
    if [[ ! "$ch" < '0' ]] && [[ ! "$ch" > '9' ]]; then
        return 0
    fi
    return 1
}

allow_word() {
    local word="$1"
    case "$word" in
        sin) return 0;;
        cos) return 0;;
        tan) return 0;;
        log) return 0;;
        exp) return 0;;
        sqrt) return 0;;
    esac
    return 1
}

################
# State Manager
################
current='start'

make_transition_to() {
    local state="$1"
    local ch="$2"
    ${current}_exit "$state"
    current="$state"
    ${current}_entry "$ch"
}


################
# States
################
result=''

start_entry() {
    local ch="$1"
    start_next "$ch"
}

start_next() {
    local ch="$1"
    if is_blank "$ch"; then
        return 0
    elif is_word "$ch"; then
        make_transition_to 'word' "$ch"
    elif is_special "$ch"; then
        make_transition_to 'special' "$ch"
    elif is_digit "$ch"; then
        make_transition_to 'real_non_dot' "$ch"
    elif is_dot "$ch"; then
        make_transition_to 'dot' "$ch"
    else
        return 0
    fi
}

start_exit() {
    return
}

word_entry() {
    local ch="$1"
    result="$ch"
}

word_next() {
    local ch="$1"
    if is_word "$ch"; then
        result="${result}${ch}"
    else
        make_transition_to 'start' "$ch"
    fi
}

word_exit() {
    if allow_word "$result"; then
        push_token "$result"
    fi
}

real_non_dot_entry() {
    local ch="$1"
    result="$ch"
}

real_non_dot_next() {
    local ch="$1"
    if is_digit "$ch"; then
        result="${result}${ch}"
    elif is_dot "$ch"; then
        make_transition_to 'real_with_dot' "$ch"
    else
        make_transition_to 'start' "$ch"
    fi
}

real_non_dot_exit() {
    local next_state="$1"
    if [[ ! "$next_state" == 'real_with_dot' ]]; then
        tokens_back
        local back="$return_"
        if [[ "$back" == '+' ]] || [[ "$back" == '-' ]]; then
            tokens_prev_back
            local prev_back="$return_"

            if ! ./is_number "$prev_back"; then
                tokens_replace_back "${back}${result}"
            else
                push_token "$result"
            fi
        else
            push_token "$result"
        fi
    fi
}

real_with_dot_entry() {
    local ch="$1"
    result="${result}${ch}"
}

real_with_dot_next() {
    local ch="$1"
    if is_digit "$ch"; then
        result="${result}${ch}"
    else
        make_transition_to 'start' "$ch"
    fi
}

real_with_dot_exit() {
    tokens_back
    local back="$return_"

    if [[ "$back" == '+' ]] || [[ "$back" == '-' ]]; then
        tokens_prev_back
        local prev_back="$return_"

        if ! ./is_number "$prev_back"; then
            tokens_replace_back "${back}${result}"
        else
            push_token "$result"
        fi
    else
        push_token "$result"
    fi
}

dot_entry() {
    local ch="$1"
    result="$ch"
}

dot_next() {
    local ch="$1"
    if is_digit "$ch"; then
        make_transition_to 'real_with_dot' "$ch"
    else
        make_transition_to 'start' "$ch"
    fi
}

dot_exit() {
    return
}

special_entry() {
    local ch="$1"
    result="$ch"
}

special_next() {
    local ch="$1"
    make_transition_to 'start' "$ch"
}

special_exit() {
    push_token "$result"
}

input_size="${#input}"
i=0
ch="${input:$i:1}"
${current}_entry "$ch"

for ((i = 1; i < input_size; i++)); do
    ch="${input:$i:1}"
    ${current}_next "$ch"
done
${current}_exit 'start'

declare -a stack

push() {
    local stack_size="${#stack[@]}"
    stack["$stack_size"]=$1
}

stack_prev_back() {
    local stack_size="${#stack[@]}"
    ((stack_size -= 2))
    if ((stack_size < 0)); then
        return_=""
    else
        return_="${stack[$stack_size]}"
    fi
}

stack_back() {
    local stack_size="${#stack[@]}"
    ((stack_size--))
    if ((stack_size < 0)); then
        return_=""
    else
        return_="${stack[$stack_size]}"
    fi
}

pop() {
    local stack_size="${#stack[@]}"
    ((stack_size--))

    if ((stack_size < 0)); then
        return_=""
    else
        return_="${stack[$stack_size]}"
        unset stack[$stack_size]
    fi
}

stack_size() {
    return_="${#stack[@]}"
}

stack_empty() {
    local size="${#stack[@]}"
    ((size <= 0))
}

stack_check_prev_back_equal() {
    if stack_empty; then 
        exit
    fi

    local token="$1"
    stack_prev_back
    if [[ "$return_" == "$token" ]]; then
        return 0
    fi
    return 1
}

is_operator() {
    local token="$1"
    case "$token" in
        '+' | '-') return 0;;
        '*' | '/') return 0;;
        '^') return 0;;
        'sin' | 'cos' | 'tan') return 0;;
        'log' | 'exp') return 0;;
        'sqrt') return 0;;
        *) return 1;;
    esac
}

is_unary() {
    local token="$1"
    case "$token" in 
        'sin' | 'cos' | 'tan') return 0;;
        'log' | 'exp') return 0;;
        'sqrt') return 0;;
        *) return 1;;
    esac
}

priority() {
    local op="$1"
    case "$op" in 
        '+' | '-') return_=0;;
        '*' | '/') return_=1;;
        '^') return_=2;;
        'sin' | 'cos' | 'tan') return_=3;;
        'log' | 'exp') return_=3;;
        'sqrt') return_=3;;
    esac
}

compute_one_operand() {
    local op="$1"
    local x="$2"
    case "$op" in
        'sin') push "$(./sin "$x")";;
        'cos') push "$(./cos "$x")";;
        'tan') push "$(./tan "$x")";;
        'log') push "$(./log "$x")";;
        'exp') push "$(./exp "$x")";;
        'sqrt') push "$(./sqrt "$x")";;
    esac
}

compute_two_operand() {
    local x="$1"
    local op="$2"
    local y="$3"
    case "$op" in
        '+') push "$(./add "$x" "$y")";;
        '-') push "$(./sub "$x" "$y")";;
        '*') push "$(./mul "$x" "$y")";;
        '/') push "$(./div "$x" "$y")";;
        '^') push "$(./pow "$x" "$y")";;
    esac
}

compute() {
    pop
    local b="$return_"
    pop
    local op="$return_"
    if is_unary "$op"; then 
        compute_one_operand "$op" "$b"
        return 0
    fi
    pop
    local a="$return_"
    compute_two_operand "$a" "$op" "$b"
}

compute_until_unique() {
    while stack_size; ((return_ > 1)); do
        compute
    done
}

compute_until() {
    local until_token="$1"
    while ! stack_check_prev_back_equal "$until_token"
    do
        compute
    done
    # clear until_token
    pop 
    local result="$return_"
    pop
    push "$result"
}

for token in "${tokens[@]}"; do 
    if [[ "$token" == ')' ]]; then 
        compute_until '('
        continue
    fi

    if ! is_operator "$token"; then
        push "$token"
        continue
    fi

    stack_back
    if ! ./is_number "$return_"; then
        push "$token"
        continue
    fi

    stack_prev_back
    prev_op="$return_"
    if ! is_operator "$prev_op" ; then
        push "$token"
        continue
    fi

    if ! is_unary "$prev_op"; then 
        priority "$token"
        p1="$return_"
        priority "$prev_op"
        p2="$return_"
        if ((p1 <= p2)); then
            compute
        fi
    else
        compute
    fi


    push "$token"
done

compute_until_unique

pop
./round "$return_"
